import os
import subprocess

def run_command(command):
    """Run a shell command."""
    result = subprocess.run(command, shell=True, text=True, capture_output=True)
    if result.returncode != 0:
        print(f"Command failed: {command}\n{result.stderr}")
    else:
        print(result.stdout)

# 1. Clone and initialize repository
run_command("git clone https://github.com/deepseek-ai/matrix-system")
os.chdir("matrix-system")

# Create directories
directories = [
    "src/core/gpu_kernels", "src/core/sparse", "src/core/solvers",
    "src/api", "src/storage", "src/monitoring",
    "tests/unit", "tests/stress", "tests/chaos",
    "docker", "docs", ".github/ISSUE_TEMPLATE", ".github/workflows"
]
for directory in directories:
    os.makedirs(directory, exist_ok=True)

# 2. Install system dependencies
run_command("sudo apt update && sudo apt install -y ocl-icd-opencl-dev nvidia-cuda-toolkit postgresql redis-server python3.11-venv")

# 3. Set up Python environment
run_command("python3 -m venv .venv")
run_command("source .venv/bin/activate && pip install -U pip wheel")
run_command("pip install pyopencl pycuda torch celery locust prometheus-client")

# 4. Configure database services
run_command("sudo systemctl start postgresql redis")
run_command("sudo -u postgres psql -c \"CREATE DATABASE matrix_db;\"")
run_command("sudo -u postgres psql -c \"CREATE USER matrix_user WITH PASSWORD 'secure_pass';\"")
run_command("sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE matrix_db TO matrix_user;\"")

# 5. Build GPU components
run_command("nvcc src/core/gpu_kernels/matrix_ops.cu -o src/core/gpu_kernels/matrix_ops.ptx -ptx -arch=sm_80 -O3 --use_fast_math")

# 6. Set up monitoring stack
run_command("docker-compose -f docker/monitoring/docker-compose.yml up -d prometheus grafana node-exporter")

# 7. Initialize configuration
with open("config/environment.py", "w") as config_file:
    config_file.write("""import os

class Config:
    MATRIX_PRECISION = os.getenv('MATRIX_PRECISION', 'float32')
    GPU_ENABLED = bool(os.getenv('USE_GPU', '1'))
    REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
    POSTGRES_DSN = os.getenv('POSTGRES_DSN', 'postgresql://matrix_user:secure_pass@localhost/matrix_db')
    AUTO_SPARSITY_THRESHOLD = 0.65
""")

# 8. Compile Protocol Buffers
run_command("protoc -I=proto --python_out=src/serialization proto/matrix.proto")

# 9. Run verification tests
run_command("pytest tests/unit/core/test_matrix_ops.py -v")

# 10. Start worker nodes
run_command("celery -A config.celery worker --loglevel=info -Q gpu_tasks,cpu_tasks --concurrency=4 --pool=gevent")

# Validation commands
print("\nTo validate the installation, run the following commands:")

# Verify GPU acceleration
print("python -c \"import torch; print(f'CUDA available: {torch.cuda.is_available()}')\"")

# Test API endpoint
print("curl -X POST http://localhost:5000/api/v1/compute -H \"Content-Type: application/protobuf\" --data-binary @tests/data/sample_matrix.pb")

# Check monitoring dashboard
print("open http://localhost:3000/d/deepseek-system-overview")

# Key maintenance commands
print("\nKey maintenance commands:")

# Update GPU kernels
print("make -C src/core/gpu_kernels clean all")

# Database maintenance
print("pg_partman maintain --table matrix_results --retention 12 --interval 1month")

# Cluster scaling
print("docker swarm init")
print("docker stack deploy -c docker/swarm.yml matrix-cluster")

# License compliance
print("pip-licenses --format=markdown --with-license-file --output-file=OSS_LICENSES.md")

# Environment variables for production deployments
print("\nFor production deployments, add these environment variables to your `.env` file:")

print("""
MATRIX_PRECISION=float32
USE_GPU=1
POSTGRES_DSN=postgresql://user:pass@db-host/matrix_prod
REDIS_URL=redis://redis-cluster:6379/0
CELERY_BROKER=pyamqp://rabbitmq-host:5672/matrix_vhost
""")